let
    Source = Table.TransformColumnTypes(Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("rZhBjiUhCIavMun1vEQBS62rdPr+1xiwCkExk1lM0quvfYgIP1jf31/1kz+QAH6ldie4c/76+f39VT70UIA75bvQS8u7Ng1aXgoPzeXG64YS15Y7XyeKPdJ207MWPzm9hvONWV0L+PENPn16UXrwOF93Rt4y0nKnFCn/tUinb55CujOcKEQLkG/QM2cNG90lczx3zI71m2DH1y1RuuJqYiMtYkQ+o0buxewGb0l14MsCyp4U9nzg+qlzR1mMLy0zXWiaQE0BppwCb5BmamWJhaWLpRZ2Szi7vgxqAT742u030E3ltUuTcg6Uazud/B5uqBqLNC1L+OvqBfuGvOVzKW2eo0sSWfAtPpX/sfrG22VenlYLYhc1idqnvWdGSQws21qUtIdweXSj7HjAnBt0xicj5ZBdA8/go7nHGdPeA5Z5QL6+t0o2+lb7RulgoWvmr/lGN1wv1nzrEk/Al2oGVLaqx2tetHg5rlHmOi2oNwLupoFTuW23N4r9VH10mWr5Wp2+LavZZUpbxrF3nJ9pEyjJLQ7ygV5WZbNSk5jYS1JUmatHA9es+KrGfpaklC84l9OMUUL1DWfsm9xI0WO36QRUldQZezbMClD0nlzlkIbC11O6tH6nIIIICBvZ7p/jTlojdrgqaoH72iJ231N4CwimkaY3lDSUbWbFWLsHTfJqVnpRu28ro0i7pYpRTrh8rbfM8eWyK6C3bJchfjyLSRdzNcqRYXVY6KViWt1l8BW9rm0UVbA0PKKCKm4mQiSXAbQnoLSmm9REmyb8mS3CfBLYm3oXRcccKeqRF1o59IFCshpdaEmRUhw3uhw5Rc9MwjzFdPKB9XyWkaNFFcxTEvmPlCsOAhWtmtI4O4IIStvii7J2H3geCzmdc6pHQRFHuvZMyxQWpbedmzg+qf0sziZ3TRoTaoRUoZ/c7pFeGov6ueb5pP3r9DANs2dsIm9YfAZN+UXlyUa6y0tjwUir1t1Cu05HnnItAEU6O42nkCzbHM2mdo5ytkUfONuyni0bLXq2ZQoCzWK7Ug5xadY6TAS5YVJMrIImmI6ShmfK6NNPpsOablWGIMwnOhtHnxZEB/e1o/XAYS1pk7EMLKOdbJchHZuTKp3oHnahLVynNJl0pKxsGCnYjO8o6qy00MteFI5Wezs42qxgjA4djZRsIHW0mNA42izqjnbNEk9lTK2RlpMPMtwf1nZrikZ5ONgLQyiaDDt6hUIWWk+3KWPgwULX0d6mzjyyhDaaZB5CHfhtOJThAFcqvZa0AsLDUydJnVCkV+vihaL1LvfqqFbf03Aao88uJ5KSqsILLdaQHK1R0galFqgE40DdK9VRspHK0WKtcqEHz+RloHPLS/mCCtp3AIs7ny08GMczqdRIu+WJUa5O2gcUHNIed5NxHyN1jzJHexwtcRlQHM1WL46CZuVCydTE0WrK42g/+cvpF0YylPQr0YK8LONu8v0mesb1neIpmEKMOtc3RQuEpnOOUqhveShAUCmhZLs5Wo70Cjn5tM6cTrREC4BB0R5KesfaZZ/OuX0GkXYxvzatQ9Yc860EpDPYdwn7DiIDg765VLyqe+/aq2JcXIaNjkf3nI9tRpcj70U/Ci4U8lOGOdIaJyEZQe0J7GgO7fspw8Nuo/edaJilpGfZCOGoEwijnOz71b/JfqSH3bCGhBDaTnHAFuUTZbCFGEkZd6Nd+fSgL3P3ECO0QVGH4DTGx3SiuH8WGXS+HPUBcknnS+k/0eKbGb8cp9D9G77+x+q/YvcUgtH/0hEjHHC2Ips1XUWa5jeeFc/nv8doXzdXvKu/jBnXmPl+/gA=", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#"Date created" = _t]), {{"Date created", type datetime}}),
    InsertTimeOnly = Table.AddColumn(Source, "Time UI", each DateTime.Time([Date created]), type time),
    ChangeToText = Table.TransformColumnTypes(InsertTimeOnly,{{"Time UI", type text}}),
    ChangeToTime = Table.TransformColumnTypes(ChangeToText,{{"Time UI", type time}}),
    DateTimeToText = Table.AddColumn(ChangeToTime, "DateTime.ToText", each Time.From( DateTime.ToText( [Date created], "HH:mm" )), type time),
    DateTimeToRecord = Table.AddColumn(DateTimeToText, "DateTime.ToRecord", each let t = DateTime.ToRecord( [Date created] ) in #time( t[Hour], t[Minute], 0), type time)
in
    DateTimeToRecord
