let
  Source = [
    fxCalendar = 
      let
        fnDateTable = (
          StartDate as date, 
          EndDate as date, 
          optional FYStartMonthNum as number, 
          optional Holidays as list, 
          optional WDStartNum as number, 
          optional AddRelativeNetWorkdays as logical
        ) as table =>
          
          let
            // // //Parameters
            // StartDate = #date(2020, 1, 1),
            // EndDate = #date(2024, 12, 31),
            // FYStartMonthNum = 1,
            // Holidays = {},
            // WDStartNum = 1,
            // AddRelativeNetWorkdays = true,
            
            //Date table code
            FYStartMonth = List.Select({1 .. 12}, each _ = FYStartMonthNum){0}? ?? 1, 
            WDStart = List.Select({0 .. 1}, each _ = WDStartNum){0}? ?? 0, 
            var_CurrentDate = Date.From(DateTime.FixedLocalNow()), 
            var_DayCount = Duration.Days(Duration.From(EndDate - StartDate)) + 1, 
            list_Dates = List.Dates(StartDate, var_DayCount, #duration(1, 0, 0, 0)), 
            tx_AddToday = 
              if EndDate < var_CurrentDate then
                List.Combine({list_Dates, {var_CurrentDate}})
              else
                list_Dates, 
            make_Table = Table.FromList(
              tx_AddToday, 
              Splitter.SplitByNothing(), 
              type table [Date = Date.Type]
            ), 
            col_Year = Table.AddColumn(make_Table, "YearNUM", each Date.Year([Date]), type number), 
            col_YearOFFSET = Table.AddColumn(
              col_Year, 
              "CurrYearOffset", 
              each Date.Year([Date]) - Date.Year(Date.From(var_CurrentDate)), 
              type number
            ), 
            col_isYearComplete = Table.AddColumn(
              col_YearOFFSET, 
              "isYearComplete", 
              each Date.EndOfYear([Date]) < Date.From(Date.EndOfYear(var_CurrentDate)), 
              type logical
            ), 
            col_QuarterNUM = Table.AddColumn(
              col_isYearComplete, 
              "QuarterNUM", 
              each Date.QuarterOfYear([Date]), 
              type number
            ), 
            col_QuarterTXT = Table.AddColumn(
              col_QuarterNUM, 
              "Quarter", 
              each "Q" & Number.ToText([QuarterNUM]), 
              type text
            ), 
            col_QuarterSTART = Table.AddColumn(
              col_QuarterTXT, 
              "Start of Quarter", 
              each Date.StartOfQuarter([Date]), 
              type date
            ), 
            col_QuarterEND = Table.AddColumn(
              col_QuarterSTART, 
              "End of Quarter", 
              each Date.EndOfQuarter([Date]), 
              type date
            ), 
            col_QuarterYearTXT = Table.AddColumn(
              col_QuarterEND, 
              "Quarter & Year", 
              each "Q"
                & Number.ToText(Date.QuarterOfYear([Date]))
                & Date.ToText([Date], [Format = " yy"]), 
              type text
            ), 
            col_QuarterYearINT = Table.AddColumn(
              col_QuarterYearTXT, 
              "QuarterYearINT", 
              each [YearNUM] * 10 + [QuarterNUM], 
              type number
            ), 
            col_QuarterOFFSET = Table.AddColumn(
              col_QuarterYearINT, 
              "CurrQuarterOffset", 
              each ((4 * Date.Year([Date])) + Date.QuarterOfYear([Date]))
                - (
                  (4 * Date.Year(Date.From(var_CurrentDate)))
                    + Date.QuarterOfYear(Date.From(var_CurrentDate))
                ), 
              type number
            ), 
            col_isQuarterComplete = Table.AddColumn(
              col_QuarterOFFSET, 
              "isQuarterComplete", 
              each Date.EndOfQuarter([Date]) < Date.From(Date.EndOfQuarter(var_CurrentDate)), 
              type logical
            ), 
            col_MonthNUM = Table.AddColumn(
              col_isQuarterComplete, 
              "MonthNUM", 
              each Date.Month([Date]), 
              type number
            ), 
            col_MonthSTART = Table.AddColumn(
              col_MonthNUM, 
              "Start of Month", 
              each Date.StartOfMonth([Date]), 
              type date
            ), 
            col_MonthEND = Table.AddColumn(
              col_MonthSTART, 
              "End of Month", 
              each Date.EndOfMonth([Date]), 
              type date
            ), 
            col_MonthYearTXT = Table.AddColumn(
              col_MonthEND, 
              "Month & Year", 
              each Text.Proper(Date.ToText([Date], [Format = "MMM yy"])), 
              type text
            ), 
            col_MonthINT = Table.AddColumn(
              col_MonthYearTXT, 
              "MonthnYear", 
              each [YearNUM] * 100 + [MonthNUM], 
              type number
            ), 
            col_MonthOFFSET = Table.AddColumn(
              col_MonthINT, 
              "CurrMonthOffset", 
              each ((12 * Date.Year([Date])) + Date.Month([Date]))
                - (
                  (12 * Date.Year(Date.From(var_CurrentDate)))
                    + Date.Month(Date.From(var_CurrentDate))
                ), 
              type number
            ), 
            col_isMonthComplete = Table.AddColumn(
              col_MonthOFFSET, 
              "isMonthComplete", 
              each Date.EndOfMonth([Date]) < Date.From(Date.EndOfMonth(var_CurrentDate)), 
              type logical
            ), 
            col_MonthNAME = Table.AddColumn(
              col_isMonthComplete, 
              "Month Name", 
              each Text.Proper(Date.ToText([Date], "MMMM")), 
              type text
            ), 
            col_MonthNameSHORT = Table.AddColumn(
              col_MonthNAME, 
              "Month Short", 
              each Text.Proper(Date.ToText([Date], "MMM")), 
              type text
            ), 
            col_MonthNameINITIAL = Table.AddColumn(
              col_MonthNameSHORT, 
              "Month Initial", 
              each Text.Start([Month Name], 1)
                & Text.Repeat(Character.FromNumber(8203), Date.Month([Date])), 
              type text
            ), 
            col_DayMonthNUM = Table.AddColumn(
              col_MonthNameINITIAL, 
              "Day of Month", 
              each Date.Day([Date]), 
              type number
            ), 
            col_WeekNUM = Table.AddColumn(
              col_DayMonthNUM, 
              "Week Number", 
              each 
                if Number.RoundDown(
                  (Date.DayOfYear([Date]) - (Date.DayOfWeek([Date], Day.Monday) + 1) + 10) / 7
                )
                  = 0
                then
                  Number.RoundDown(
                    (
                      Date.DayOfYear(#date(Date.Year([Date]) - 1, 12, 31))
                        - (Date.DayOfWeek(#date(Date.Year([Date]) - 1, 12, 31), Day.Monday) + 1)
                        + 10
                    )
                      / 7
                  )
                else if (
                  Number.RoundDown(
                    (Date.DayOfYear([Date]) - (Date.DayOfWeek([Date], Day.Monday) + 1) + 10) / 7
                  )
                    = 53 and (Date.DayOfWeek(#date(Date.Year([Date]), 12, 31), Day.Monday) + 1 < 4)
                )
                then
                  1
                else
                  Number.RoundDown(
                    (Date.DayOfYear([Date]) - (Date.DayOfWeek([Date], Day.Monday) + 1) + 10) / 7
                  ), 
              type number
            ), 
            col_WeekSTART = Table.AddColumn(
              col_WeekNUM, 
              "Start of Week", 
              each Date.StartOfWeek([Date], Day.Monday), 
              type date
            ), 
            col_WeekEND = Table.AddColumn(
              col_WeekSTART, 
              "End of Week", 
              each Date.EndOfWeek([Date], Day.Monday), 
              type date
            ), 
            col_WeekYearTXT = Table.AddColumn(
              col_WeekEND, 
              "Week & Year", 
              each "W"
                & Text.PadStart(Text.From([Week Number]), 2, "0")
                & " "
                & Text.From(Date.Year(Date.AddDays(Date.StartOfWeek([Date], Day.Monday), 3))), 
              type text
            ), 
            col_WeekYearINT = Table.AddColumn(
              col_WeekYearTXT, 
              "WeeknYear", 
              each Date.Year(Date.AddDays(Date.StartOfWeek([Date], Day.Monday), 3))
                * 100 + [Week Number], 
              Int64.Type
            ), 
            col_WeekOFFSET = Table.AddColumn(
              col_WeekYearINT, 
              "CurrWeekOffset", 
              each (
                Number.From(Date.StartOfWeek([Date], Day.Monday))
                  - Number.From(Date.StartOfWeek(var_CurrentDate, Day.Monday))
              )
                / 7, 
              type number
            ), 
            col_isWeekComplete = Table.AddColumn(
              col_WeekOFFSET, 
              "WeekCompleted", 
              each Date.EndOfWeek([Date], Day.Monday)
                < Date.From(Date.EndOfWeek(var_CurrentDate, Day.Monday)), 
              type logical
            ), 
            col_DayWeekNUM = Table.AddColumn(
              col_isWeekComplete, 
              "Day of Week Number", 
              each Date.DayOfWeek([Date], Day.Monday) + WDStart, 
              Int64.Type
            ), 
            col_DayNAME = Table.AddColumn(
              col_DayWeekNUM, 
              "Day of Week Name", 
              each Text.Proper(Date.ToText([Date], "dddd")), 
              type text
            ), 
            col_DayNameSHORT = Table.AddColumn(
              col_DayNAME, 
              "Day Name Short", 
              each Text.Proper(Date.ToText([Date], "ddd")), 
              type text
            ), 
            col_DayINITIAL = Table.AddColumn(
              col_DayNameSHORT, 
              "Day of Week Initial", 
              each Text.Proper(Text.Start([Day of Week Name], 1))
                & Text.Repeat(
                  Character.FromNumber(8203), 
                  Date.DayOfWeek([Date], Day.Monday) + WDStart
                ), 
              type text
            ), 
            col_DayYearNUM = Table.AddColumn(
              col_DayINITIAL, 
              "Day of Year", 
              each Date.DayOfYear([Date]), 
              Int64.Type
            ), 
            col_DayMonthYearINT = Table.AddColumn(
              col_DayYearNUM, 
              "DateInt", 
              each [YearNUM] * 10000 + [MonthNUM] * 100 + [Day of Month], 
              type number
            ), 
            col_DayOFFSET = Table.AddColumn(
              col_DayMonthYearINT, 
              "CurrDayOffset", 
              each Number.From([Date]) - Number.From(var_CurrentDate), 
              type number
            ), 
            col_isAfterToday = Table.AddColumn(
              col_DayOFFSET, 
              "IsAfterToday", 
              each not ([Date] <= Date.From(var_CurrentDate)), 
              type logical
            ), 
            col_isWeekDay = Table.AddColumn(
              col_isAfterToday, 
              "IsWeekDay", 
              each if Date.DayOfWeek([Date], Day.Monday) > 4 then false else true, 
              type logical
            ), 
            col_isHoliday = Table.AddColumn(
              col_isWeekDay, 
              "IsHoliday", 
              each if Holidays = null then "Unknown" else List.Contains(Holidays, [Date]), 
              if Holidays = null then type text else type logical
            ), 
            col_isBusinessDay = Table.AddColumn(
              col_isHoliday, 
              "IsBusinessDay", 
              each if [IsWeekDay] = true and [IsHoliday] <> true then true else false, 
              type logical
            ), 
            col_DayTYPE = Table.AddColumn(
              col_isBusinessDay, 
              "Day Type", 
              each 
                if [IsHoliday] = true then
                  "Holiday"
                else if [IsWeekDay] = false then
                  "Weekend"
                else if [IsWeekDay] = true then
                  "Weekday"
                else
                  null, 
              type text
            ), 
            col_ISOYear = Table.AddColumn(
              col_DayTYPE, 
              "ISO Year", 
              each Date.Year(Date.AddDays(Date.StartOfWeek([Date], Day.Monday), 3)), 
              type number
            ), 
            col_ISOQuarterNUM = Table.AddColumn(
              col_ISOYear, 
              "ISO QuarterNUM", 
              each 
                if [Week Number] > 39 then
                  4
                else if [Week Number] > 26 then
                  3
                else if [Week Number] > 13 then
                  2
                else
                  1, 
              Int64.Type
            ), 
            col_ISOQuarterNAME = Table.AddColumn(
              col_ISOQuarterNUM, 
              "ISO Quarter", 
              each "Q" & Number.ToText([ISO QuarterNUM]), 
              type text
            ), 
            col_ISOQuarterYearNAME = Table.AddColumn(
              col_ISOQuarterNAME, 
              "ISO Quarter & Year", 
              each "Q" & Number.ToText([ISO QuarterNUM]) & " " & Number.ToText([ISO Year]), 
              type text
            ), 
            col_ISOQuarterYearINT = Table.AddColumn(
              col_ISOQuarterYearNAME, 
              "ISO QuarterYearINT", 
              each [ISO Year] * 10 + [ISO QuarterNUM], 
              type number
            ), 
            // BufferTable = Table.Buffer(Table.Distinct( col_ISOQuarterYearINT[[ISO Year], [DateInt]])),
            // InsertISOday = Table.AddColumn(col_ISOQuarterYearINT, "ISO Day of Year", (OT) => Table.RowCount( Table.SelectRows( BufferTable, (IT) => IT[DateInt] <= OT[DateInt] and IT[ISO Year] = OT[ISO Year])),  Int64.Type),
            col_FiscalYearTXT = Table.AddColumn(
              col_ISOQuarterYearINT, 
              "Fiscal Year", 
              each 
                let
                  start = Text.End(Text.From([YearNUM] - 1), 2), 
                  end = Text.End(Text.From([YearNUM] + 0), 2), 
                  result = "FY"
                    & (if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then end else start)
                in
                  result, 
              type text
            ), 
            //col_FYs = Table.AddColumn(col_FY, "Fiscal Year short", each "FY" & (if [MonthNUM] >= FYStartMonth and FYStartMonth >1 then Text.PadEnd( Text.End( Text.From([YearNUM] +1), 2), 2, "0") else Text.End( Text.From([YearNUM]), 2)), type text),
            col_FiscalQuarterTXT = Table.AddColumn(
              col_FiscalYearTXT, 
              "Fiscal Quarter", 
              each 
                let
                  start = Text.End(Text.From([YearNUM] - 1), 2)
                    & "/"
                    & Text.End(Text.From([YearNUM] + 0), 2), 
                  end = Text.End(Text.From([YearNUM] + 0), 2)
                    & "/"
                    & Text.End(Text.From([YearNUM] + 1), 2), 
                  result = "FQ"
                    & Text.From(
                      Number.RoundUp(Date.Month(Date.AddMonths([Date], - (FYStartMonth - 1))) / 3)
                    )
                    & " "
                    & (if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then end else start)
                in
                  result, 
              type text
            ), 
            col_FiscalQuarterYearINT = Table.AddColumn(
              col_FiscalQuarterTXT, 
              "FQuarternYear", 
              each (
                if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then [YearNUM] + 1 else [YearNUM]
              )
                * 10 + Number.RoundUp(Date.Month(Date.AddMonths([Date], - (FYStartMonth - 1))) / 3), 
              type number
            ), 
            col_FiscalPeriodNUM = Table.AddColumn(
              col_FiscalQuarterYearINT, 
              "Fiscal Period Number", 
              each 
                if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then
                  [MonthNUM] - (FYStartMonth - 1)
                else if [MonthNUM] >= FYStartMonth and FYStartMonth = 1 then
                  [MonthNUM]
                else
                  [MonthNUM] + (12 - FYStartMonth + 1), 
              type number
            ), 
            col_FiscalPeriodYearTXT = Table.AddColumn(
              col_FiscalPeriodNUM, 
              "Fiscal Period", 
              each "FP"
                & Text.PadStart(Text.From([Fiscal Period Number]), 2, "0")
                & " "
                & (
                  if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then
                    Text.End(Text.From([YearNUM] + 1), 2)
                  else
                    Text.End(Text.From([YearNUM]), 2)
                ), 
              type text
            ), 
            col_FiscalPeriodYearINT = Table.AddColumn(
              col_FiscalPeriodYearTXT, 
              "FPeriodnYear", 
              each (
                if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then [YearNUM] + 1 else [YearNUM]
              )
                * 100 + [Fiscal Period Number], 
              type number
            ), 
            var_FiscalCalendarSTART = #date(Date.Year(StartDate) - 1, FYStartMonth, 1), 
            col_FiscalFirstDay = Table.AddColumn(
              col_FiscalPeriodYearINT, 
              "FiscalFirstDay", 
              each 
                if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then
                  #date(Date.Year([Date]) + 1, FYStartMonth, 1)
                else
                  #date(Date.Year([Date]), FYStartMonth, 1), 
              type date
            ), 
            var_Table = Table.FromList(
              List.Transform(
                {Number.From(var_FiscalCalendarSTART) .. Number.From(EndDate)}, 
                Date.From
              ), 
              Splitter.SplitByNothing(), 
              type table [DateFW = Date.Type]
            ), 
            col_FFD = Table.AddColumn(
              var_Table, 
              "FiscalFirstDay", 
              each 
                if Date.Month([DateFW]) < FYStartMonth then
                  #date(Date.Year([DateFW]), FYStartMonth, 1)
                else
                  #date(Date.Year([DateFW]) + 1, FYStartMonth, 1)
            ), 
            col_FWSD = Table.AddColumn(
              col_FFD, 
              "FWStartDate", 
              each Date.AddYears(Date.StartOfWeek([DateFW], Day.Monday), 1)
            ), 
            tbl_Group1 = Table.Group(
              col_FWSD, 
              {"FiscalFirstDay", "FWStartDate"}, 
              {
                {
                  "AllRows", 
                  each _, 
                  type table [DateFW = nullable date, FiscalFirstDay = date, FWStartDate = date]
                }
              }
            ), 
            tbl_Group2 = Table.Group(
              tbl_Group1, 
              {"FiscalFirstDay"}, 
              {
                {
                  "AllRows2", 
                  each _, 
                  type table [FiscalFirstDay = date, FWStartDate = date, AllRows = table]
                }
              }
            ), 
            col_Index = Table.AddColumn(
              tbl_Group2, 
              "Custom", 
              each Table.AddIndexColumn([AllRows2], "Fiscal Week Number", 1, 1)
            )[[Custom]], 
            cols_Expand1 = Table.ExpandTableColumn(
              col_Index, 
              "Custom", 
              {"FiscalFirstDay", "FWStartDate", "AllRows", "Fiscal Week Number"}, 
              {"FiscalFirstDay", "FWStartDate", "AllRows", "Fiscal Week Number"}
            ), 
            cols_Expand2 = Table.ExpandTableColumn(cols_Expand1, "AllRows", {"DateFW"}, {"DateFW"})[
              [DateFW], 
              [Fiscal Week Number]
            ], 
            join_Date_DateFW = Table.Join(
              col_FiscalFirstDay, 
              {"Date"}, 
              cols_Expand2, 
              {"DateFW"}, 
              JoinKind.LeftOuter, 
              JoinAlgorithm.SortMerge
            ), 
            var_FWLogicTest = List.Contains({null}, FYStartMonthNum), 
            txt_Replace = 
              if var_FWLogicTest then
                Table.ReplaceValue(
                  join_Date_DateFW, 
                  each [Fiscal Week Number], 
                  each if FYStartMonth = 1 then [Week Number] else [Fiscal Week Number], 
                  Replacer.ReplaceValue, 
                  {"Fiscal Week Number"}
                )
              else
                join_Date_DateFW, 
            col_FYW = Table.AddColumn(
              txt_Replace, 
              "Fiscal Week", 
              each 
                if var_FWLogicTest then
                  "F" & [#"Week & Year"]
                else if FYStartMonth = 1 then
                  "FW"
                    & Text.PadStart(Text.From([Fiscal Week Number]), 2, "0")
                    & Date.ToText([Date], " yyyy")
                else if Date.Month([Date]) < FYStartMonth then
                  "FW"
                    & Text.PadStart(Text.From([Fiscal Week Number]), 2, "0")
                    & Date.ToText([Date], " yyyy")
                else
                  "FW"
                    & Text.PadStart(Text.From([Fiscal Week Number]), 2, "0")
                    & " "
                    & Text.From(Date.Year([Date]) + 1), 
              type text
            ), 
            col_FWYearINT = Table.AddColumn(
              col_FYW, 
              "FWeeknYear", 
              each 
                if var_FWLogicTest then
                  [WeeknYear]
                else
                  (
                    if FYStartMonth = 1 then
                      Date.Year([Date])
                    else if Date.Month([Date]) < FYStartMonth then
                      Date.Year([Date])
                    else
                      Date.Year([Date]) + 1
                  )
                    * 100 + [Fiscal Week Number], 
              Int64.Type
            ), 
            rec_CurrentDate = Table.SelectRows(col_FWYearINT, each ([Date] = var_CurrentDate)), 
            var_CurrISOYear = rec_CurrentDate{0}[ISO Year], 
            var_CurrISOQtr = rec_CurrentDate{0}[ISO QuarterNUM], 
            var_CurrYear = rec_CurrentDate{0}[YearNUM], 
            var_CurrMonth = rec_CurrentDate{0}[MonthNUM], 
            var_FFD = rec_CurrentDate{0}[FiscalFirstDay], 
            var_PFFD = Date.AddYears(var_FFD, - 1), 
            var_CurrFY = rec_CurrentDate{0}[Fiscal Year], 
            var_CurrFQ = rec_CurrentDate{0}[FQuarternYear], 
            var_CurrFP = rec_CurrentDate{0}[FPeriodnYear], 
            var_CurrFW = rec_CurrentDate{0}[FWeeknYear], 
            col_ISOYearOFFSET = Table.AddColumn(
              col_FWYearINT, 
              "ISO CurrYearOffset", 
              each [ISO Year] - var_CurrISOYear, 
              type number
            ), 
            col_ISOQuarterOFFSET = Table.AddColumn(
              col_ISOYearOFFSET, 
              "ISO CurrQuarterOffset", 
              each ((4 * [ISO Year]) + [ISO QuarterNUM]) - ((4 * var_CurrISOYear) + var_CurrISOQtr), 
              type number
            ), 
            col_FiscalYearOFFSET = Table.AddColumn(
              col_ISOQuarterOFFSET, 
              "Fiscal CurrYearOffset", 
              each try
                (if [MonthNUM] >= FYStartMonth then [YearNUM] + 1 else [YearNUM])
                  - (if var_CurrMonth >= FYStartMonth then var_CurrYear + 1 else var_CurrYear)
              otherwise
                null, 
              type number
            ), 
            col_isCurrFY = Table.AddColumn(
              col_FiscalYearOFFSET, 
              "IsCurrentFY", 
              each if [Fiscal Year] = var_CurrFY then true else false, 
              type logical
            ), 
            col_isCurrFQ = Table.AddColumn(
              col_isCurrFY, 
              "IsCurrentFQ", 
              each if [FQuarternYear] = var_CurrFQ then true else false, 
              type logical
            ), 
            col_isCurrFP = Table.AddColumn(
              col_isCurrFQ, 
              "IsCurrentFP", 
              each if [FPeriodnYear] = var_CurrFP then true else false, 
              type logical
            ), 
            col_isCurrFW = Table.AddColumn(
              col_isCurrFP, 
              "IsCurrentFW", 
              each if [FWeeknYear] = col_ISOYearOFFSET then true else false, 
              type logical
            ), 
            col_isPrevYTD = Table.AddColumn(
              col_isCurrFW, 
              "IsPYTD", 
              each 
                if var_CurrYear - 1 = [YearNUM] and [Day of Year] <= rec_CurrentDate{0}[Day of Year] then
                  true
                else
                  false, 
              type logical
            ), 
            list_PrevFiscalYearDates = List.Buffer(
              Table.SelectRows(
                Table.ExpandTableColumn(
                  Table.NestedJoin(
                    Table.AddIndexColumn(
                      Table.RenameColumns(
                        Table.TransformColumnTypes(
                          Table.FromList(
                            List.Dates(
                              var_PFFD, 
                              Number.From(var_FFD - var_PFFD), 
                              #duration(1, 0, 0, 0)
                            ), 
                            Splitter.SplitByNothing()
                          ), 
                          {{"Column1", type date}}
                        ), 
                        {{"Column1", "DateFY"}}
                      ), 
                      "Index", 
                      1, 
                      1
                    ), 
                    {"Index"}, 
                    Table.AddIndexColumn(
                      Table.RenameColumns(
                        Table.TransformColumnTypes(
                          Table.FromList(
                            List.Dates(
                              Date.AddYears(var_PFFD, - 1), 
                              Number.From(var_PFFD - Date.AddYears(var_PFFD, - 1)), 
                              #duration(1, 0, 0, 0)
                            ), 
                            Splitter.SplitByNothing()
                          ), 
                          {{"Column1", type date}}
                        ), 
                        {{"Column1", "DateFY"}}
                      ), 
                      "Index", 
                      1, 
                      1
                    ), 
                    {"Index"}, 
                    "Table", 
                    JoinKind.LeftOuter
                  ), 
                  "Table", 
                  {"DateFY"}, 
                  {"PrevDateFY"}
                ), 
                each [DateFY] <= var_CurrentDate
              )[PrevDateFY]
            ), 
            col_isPrevFYTD = Table.AddColumn(
              col_isPrevYTD, 
              "IsPFYTD", 
              each 
                if [Fiscal CurrYearOffset] = - 1 and List.Contains(list_PrevFiscalYearDates, [Date]) then
                  true
                else
                  false, 
              type logical
            ), 
            col_FYgroup = Table.AddColumn(
              col_isPrevFYTD, 
              "FiscalYearGroup", 
              each 
                if [Fiscal CurrYearOffset] < 2 then
                  [Fiscal Year]
                else if [Fiscal CurrYearOffset] >= 2 then
                  List.Max(
                    Table.SelectRows(col_isPrevFYTD, each ([Fiscal CurrYearOffset] = 2))[
                      Fiscal Year
                    ]
                  )
                    & "+"
                else
                  null, 
              type text
            ), 
            col_FiscalYearSplitTXT = Table.AddColumn(
              col_FYgroup, 
              "FiscalYearSplit", 
              each 
                let
                  start = Text.End(Text.From([YearNUM] - 1), 2)
                    & "/"
                    & Text.End(Text.From([YearNUM] + 0), 2), 
                  end = Text.End(Text.From([YearNUM] + 0), 2)
                    & "/"
                    & Text.End(Text.From([YearNUM] + 1), 2), 
                  result = (if [MonthNUM] >= FYStartMonth and FYStartMonth > 1 then end else start)
                in
                  result, 
              type text
            ), 
            col_NetWorkDays = 
              if AddRelativeNetWorkdays = true then
                Table.AddColumn(
                  col_FiscalYearSplitTXT, 
                  "Relative Networkdays", 
                  each fxNETWORKDAYS(StartDate, [Date], Holidays), 
                  type number
                )
              else
                col_FiscalYearSplitTXT, 
            fxNETWORKDAYS = (StartDate, EndDate, optional Holidays as list) =>
              let
                list_Dates = List.Dates(
                  StartDate, 
                  Number.From(EndDate - StartDate) + 1, 
                  Duration.From(1)
                ), 
                DeleteHolidays = 
                  if Holidays = null then
                    list_Dates
                  else
                    List.Difference(list_Dates, List.Transform(Holidays, Date.From)), 
                DeleteWeekends = List.Select(DeleteHolidays, each Date.DayOfWeek(_, Day.Monday) < 5), 
                CountDays = List.Count(DeleteWeekends)
              in
                CountDays, 
            cols_RemoveToday = Table.RemoveColumns(
              if EndDate < var_CurrentDate then
                Table.SelectRows(col_NetWorkDays, each ([Date] <> var_CurrentDate))
              else
                col_NetWorkDays, 
              {"Day of Year", "FiscalFirstDay"}
            ), 
            cols_Format = Table.TransformColumnTypes(
              cols_RemoveToday, 
              {
                {"YearNUM", Int64.Type}, 
                {"QuarterNUM", Int64.Type}, 
                {"MonthNUM", Int64.Type}, 
                {"Day of Month", Int64.Type}, 
                {"DateInt", Int64.Type}, 
                {"Day of Week Number", Int64.Type}, 
                {"ISO CurrYearOffset", Int64.Type}, 
                {"ISO QuarterYearINT", Int64.Type}, 
                {"ISO CurrQuarterOffset", Int64.Type}, 
                {"Week Number", Int64.Type}, 
                {"WeeknYear", Int64.Type}, 
                {"MonthnYear", Int64.Type}, 
                {"QuarterYearINT", Int64.Type}, 
                {"FQuarternYear", Int64.Type}, 
                {"Fiscal Period Number", Int64.Type}, 
                {"FPeriodnYear", Int64.Type}, 
                {"CurrWeekOffset", Int64.Type}, 
                {"CurrMonthOffset", Int64.Type}, 
                {"CurrQuarterOffset", Int64.Type}, 
                {"CurrYearOffset", Int64.Type}, 
                {"Fiscal CurrYearOffset", Int64.Type}, 
                {"Fiscal Week Number", Int64.Type}
              }
            ), 
            cols_Reorder = Table.ReorderColumns(
              cols_Format, 
              {
                "Date", 
                "FiscalYearGroup", 
                "FiscalYearSplit", 
                "YearNUM", 
                "CurrYearOffset", 
                "isYearComplete", 
                "QuarterNUM", 
                "Quarter", 
                "Start of Quarter", 
                "End of Quarter", 
                "Quarter & Year", 
                "QuarterYearINT", 
                "CurrQuarterOffset", 
                "isQuarterComplete", 
                "MonthNUM", 
                "Start of Month", 
                "End of Month", 
                "Month & Year", 
                "MonthnYear", 
                "CurrMonthOffset", 
                "isMonthComplete", 
                "Month Name", 
                "Month Short", 
                "Month Initial", 
                "Day of Month", 
                "Week Number", 
                "Start of Week", 
                "End of Week", 
                "Week & Year", 
                "WeeknYear", 
                "CurrWeekOffset", 
                "WeekCompleted", 
                "Day of Week Number", 
                "Day of Week Name", 
                "Day of Week Initial", 
                "DateInt", 
                "CurrDayOffset", 
                "IsAfterToday", 
                "IsWeekDay", 
                "IsHoliday", 
                "IsBusinessDay", 
                "Day Type", 
                "ISO Year", 
                "ISO CurrYearOffset", 
                "ISO QuarterNUM", 
                "ISO Quarter", 
                "ISO Quarter & Year", 
                "ISO QuarterYearINT", 
                "ISO CurrQuarterOffset", 
                "Fiscal Year", 
                "Fiscal CurrYearOffset", 
                "Fiscal Quarter", 
                "FQuarternYear", 
                "Fiscal Period Number", 
                "Fiscal Period", 
                "FPeriodnYear", 
                "DateFW", 
                "Fiscal Week Number", 
                "Fiscal Week", 
                "FWeeknYear", 
                "IsCurrentFY", 
                "IsCurrentFQ", 
                "IsCurrentFP", 
                "IsCurrentFW", 
                "IsPYTD", 
                "IsPFYTD"
              }
            ), 
            list_Columns = 
              if var_FWLogicTest then
                Table.RemoveColumns(
                  cols_Reorder, 
                  {
                    "ISO QuarterNUM", 
                    "Fiscal Year", 
                    "Fiscal Quarter", 
                    "FQuarternYear", 
                    "Fiscal Period Number", 
                    "Fiscal Period", 
                    "FPeriodnYear", 
                    "DateFW", 
                    "Fiscal Week Number", 
                    "Fiscal Week", 
                    "FWeeknYear", 
                    "Fiscal CurrYearOffset", 
                    "IsCurrentFQ", 
                    "IsCurrentFP", 
                    "IsCurrentFW"
                  }
                )
              else
                Table.RemoveColumns(
                  cols_Reorder, 
                  {"Fiscal Period Number", "DateFW", "Fiscal Week Number", "ISO QuarterNUM"}
                )
          in
            list_Columns, 
        Documentation = [
          Documentation.Name = " fxCalendar", 
          Documentation.Description = " Date table function to create an ISO-8601 calendar", 
          Documentation.LongDescription = " Date table function to create an ISO-8601 calendar", 
          Documentation.Category = " Table", 
          Documentation.Version
            = " 1.32: Adjusted fiscal weeks logic depending on wheter a fiscal start month was submitted", 
          Documentation.Source = " local", 
          Documentation.Author = " Melissa de Korte", 
          Documentation.Examples = {
            [
              Description
                = " See: https://forum.enterprisedna.co/t/extended-date-table-power-query-m-function/6390", 
              Code
                = " Optional paramters: #(lf)
                    (FYStartMonthNum) Month number the fiscal year starts, Januari if omitted #(lf) 
                    (Holidays) Select a query (and column) that contains a list of holiday dates #(lf) 
                    (WDStartNum) Switch default weekday numbering from 0-6 to 1-7 by entering a 1 #(lf)
                    #(lf)
                    Important to note: #(lf)
                    [Fiscal Week] starts on a Monday and can contain less than 7 days in a First- and/or Last Week of a FY #(lf)
                    [IsWorkingDay] does not take holiday dates into account  #(lf)
                    [IsBusinessDay] does take optional holiday dates into account  #(lf)
                    [IsPYTD] and [IsPFYTD] compare Previous [Day of Year] with the Current [Day of Year] number, so dates don't align in leap years", 
              Result = " "
            ]
          }
        ]
      in
        Value.ReplaceType(
          fnDateTable, 
          Value.ReplaceMetadata(Value.Type(fnDateTable), Documentation)
        ), 
    ChangeLog = Table.FromRows(
      Json.Document(
        Binary.Decompress(
          Binary.FromText(
            "nVXLjtowFP0VizW0CahTzXIKEzWjlvcoQnQWbuNARHBGiSll133/cr6kfsd5Z7Ii+J77Ovf4er8fzCBBg+HAHtmjsTW26KcvTgYvw/1gh2BCv6UFX84/UaJs00uSMPsiCFJE6OlobGLWCMMz8ofgClPwC0YR8oEBV9Gn8fk1QgT51GW7fn6kP1F8CKmDyrO6wISgBMxVZLstjfRYBLx8IwbFr5g3QX9YwXN05dYNoVYQByCDlflQ4Efs56ETezSpwarSf1wsa3wHJJsrG0i4rMPEYoPyXKPTI8QH2pw4AEGcnCHRg9Atq1nYVmeW9DzkSftIvseYHLtMggONOWimdYQ2nhVwUkbWJqSuIT5klRb4f4K4agAcatL/Hv5lo4r9SVdmNPf8f0fmwZyGE43Qid2q+gCbY5wQgcnstYVwNI+aRXBxSEKe+ent779Ckhm85cbY1i7FLwKBZu4eQqd3XGh3swDMRYJySmLnTB/WyB5Tgdj3tVKSyE+dhMTAho54wXkZeVbxHiuJsL+mQHjpPYXFfI1bPfncxpXhoHK3y0qOMz+W1nXOh8pZLcUQAvWQj1HqQ0OijXG0As1YmQ49qsOcFOv6pxm1mwhHkIuJpj8/AM01r0NRfX+XAyktuelDQHfkNhZdOQ/fNhV8uikrY8YhJcYrFZ56cXKiamM+IsLXOApFkmd8wvEVZ0E+mlfRTb9c0pDynNbk04xub69iKpyhwo1md6zpuWf2Hk++CmtIkh1VP8hFc6eH08D3eDxVWz0eUCOx0Z0TptSuSnZ23VaE9OpBsPAsUCzDZSw7Je5qK2nj0kywREkYs7XiLDtvQ0c49VmIMqtc5E55A9cTxAei9MQCfAC1BTbva3np2KgQJs6ucgtk60LhVk3bQoGWXUBeE2i5284a7U4jYI0iSMLfCMwRudKNRPdEWnyheW8v/wE=", 
            BinaryEncoding.Base64
          ), 
          Compression.Deflate
        )
      ), 
      let
        _t = ((type nullable text) meta [Serialized.Text = true])
      in
        type table [FIELD = _t, #"EXAMPLE VALUE" = _t, #"DATA TYPE" = _t, REMARK = _t]
    )
  ], 
  fxCalendar = Source[fxCalendar]
in
  fxCalendar
